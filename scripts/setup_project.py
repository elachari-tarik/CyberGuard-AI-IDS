#!/usr/bin/env python3
"""
Script de configuration initiale du projet CyberGuard AI
"""
import os
import sys
from pathlib import Path

def setup_project():
    """Configure le projet pour la premi√®re utilisation"""
    print("üõ°Ô∏è Configuration initiale de CyberGuard AI...")
    
    # V√©rifier l'environnement virtuel
    if not hasattr(sys, 'real_prefix') and not (hasattr(sys, 'base_prefix') and sys.base_prefix != sys.prefix):
        print("‚ö†Ô∏è  Attention: Vous n'√™tes pas dans un environnement virtuel!")
        print("Ex√©cutez : source cyberguard_env/bin/activate")
        return False
    
    # Cr√©er les r√©pertoires manquants
    directories = [
        'logs', 'models/trained', 'data/captured', 'data/processed'
    ]
    
    for directory in directories:
        Path(directory).mkdir(parents=True, exist_ok=True)
        print(f"‚úì R√©pertoire cr√©√©: {directory}")
    
    # V√©rifier les d√©pendances critiques
    try:
        import pandas, numpy, sklearn, flask, sqlalchemy
        print("‚úì D√©pendances principales install√©es")
    except ImportError as e:
        print(f"‚ùå D√©pendance manquante: {e}")
        print("Ex√©cutez : pip install -r requirements.txt")
        return False
    
    # V√©rifier la configuration
    if not Path('.env').exists():
        print("‚ùå Fichier .env manquant")
        print("Cr√©ez le fichier .env avec la configuration de la base de donn√©es")
        return False
    
    print("‚úÖ Configuration termin√©e avec succ√®s!")
    return True

if __name__ == "__main__":
    setup_project()

