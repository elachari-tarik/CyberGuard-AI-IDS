#!/usr/bin/env python3
"""
Script de configuration de la base de donn√©es PostgreSQL
"""
import sys
import os
import psycopg2
from psycopg2.extensions import ISOLATION_LEVEL_AUTOCOMMIT

# Ajouter le r√©pertoire parent au path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from config.config import Config

def create_database():
    """Cr√©e la base de donn√©es et l'utilisateur si n√©cessaire"""
    try:
        # Connexion avec l'utilisateur postgres par d√©faut
        conn = psycopg2.connect(
            host=Config.POSTGRES_HOST,
            port=Config.POSTGRES_PORT,
            user='postgres',  # Utilisateur admin par d√©faut
            password='postgres'  # Changez si n√©cessaire
        )
        conn.set_isolation_level(ISOLATION_LEVEL_AUTOCOMMIT)
        cursor = conn.cursor()
        
        # Cr√©er l'utilisateur s'il n'existe pas
        try:
            cursor.execute(f"CREATE USER {Config.POSTGRES_USER} WITH PASSWORD '{Config.POSTGRES_PASSWORD}';")
            print(f"‚úì Utilisateur {Config.POSTGRES_USER} cr√©√©")
        except psycopg2.errors.DuplicateObject:
            print(f"‚úì Utilisateur {Config.POSTGRES_USER} existe d√©j√†")
        
        # Cr√©er la base de donn√©es si elle n'existe pas
        try:
            cursor.execute(f"CREATE DATABASE {Config.POSTGRES_DB} OWNER {Config.POSTGRES_USER};")
            print(f"‚úì Base de donn√©es {Config.POSTGRES_DB} cr√©√©e")
        except psycopg2.errors.DuplicateDatabase:
            print(f"‚úì Base de donn√©es {Config.POSTGRES_DB} existe d√©j√†")
        
        # Donner tous les privil√®ges
        cursor.execute(f"GRANT ALL PRIVILEGES ON DATABASE {Config.POSTGRES_DB} TO {Config.POSTGRES_USER};")
        print(f"‚úì Privil√®ges accord√©s √† {Config.POSTGRES_USER}")
        
        cursor.close()
        conn.close()
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la configuration de la base: {e}")
        print("Assurez-vous que PostgreSQL est install√© et d√©marr√©")
        return False

def initialize_tables():
    """Initialise les tables de la base de donn√©es"""
    try:
        from src.database import DatabaseManager
        
        print("üîß Initialisation des tables...")
        db_manager = DatabaseManager()
        print("‚úÖ Tables initialis√©es avec succ√®s!")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de l'initialisation des tables: {e}")
        return False

def main():
    """Fonction principale"""
    print("üóÑÔ∏è Configuration de la base de donn√©es CyberGuard AI...")
    
    if create_database():
        if initialize_tables():
            print("‚úÖ Base de donn√©es configur√©e avec succ√®s!")
        else:
            print("‚ùå Erreur lors de l'initialisation des tables")
    else:
        print("‚ùå Erreur lors de la cr√©ation de la base")

if __name__ == "__main__":
    main()

