from scapy.all import sniff, IP, TCP, UDP, ICMP
import threading
import queue
import time
from datetime import datetime
import logging

class NetworkCapture:
    def __init__(self, interface='any', filter_str='ip'):
        self.interface = interface
        self.filter_str = filter_str
        self.packet_queue = queue.Queue(maxsize=10000)
        self.is_capturing = False
        self.capture_thread = None
        
        # Configuration du logging
        logging.basicConfig(level=logging.INFO)
        self.logger = logging.getLogger(__name__)
    
    def packet_handler(self, packet):
        """Traite chaque paquet capturé"""
        try:
            if IP in packet:
                packet_info = self.extract_packet_info(packet)
                if packet_info:
                    self.packet_queue.put(packet_info, block=False)
        except queue.Full:
            self.logger.warning("Queue pleine, paquet ignoré")
        except Exception as e:
            self.logger.error(f"Erreur traitement paquet: {e}")
    
    def extract_packet_info(self, packet):
        """Extrait les informations importantes du paquet"""
        try:
            packet_info = {
                'timestamp': datetime.now(),
                'src_ip': packet[IP].src,
                'dst_ip': packet[IP].dst,
                'protocol': packet[IP].proto,
                'packet_size': len(packet),
                'ttl': packet[IP].ttl,
                'flags': packet[IP].flags
            }
            
            # Informations spécifiques TCP
            if TCP in packet:
                packet_info.update({
                    'src_port': packet[TCP].sport,
                    'dst_port': packet[TCP].dport,
                    'tcp_flags': packet[TCP].flags,
                    'window_size': packet[TCP].window,
                    'protocol_name': 'TCP'
                })
            
            # Informations spécifiques UDP
            elif UDP in packet:
                packet_info.update({
                    'src_port': packet[UDP].sport,
                    'dst_port': packet[UDP].dport,
                    'protocol_name': 'UDP'
                })
            
            # Informations spécifiques ICMP
            elif ICMP in packet:
                packet_info.update({
                    'icmp_type': packet[ICMP].type,
                    'icmp_code': packet[ICMP].code,
                    'protocol_name': 'ICMP'
                })
            
            return packet_info
            
        except Exception as e:
            self.logger.error(f"Erreur extraction packet info: {e}")
            return None
    
    def start_capture(self):
        """Démarre la capture réseau"""
        if self.is_capturing:
            return
        
        self.is_capturing = True
        self.capture_thread = threading.Thread(target=self._capture_loop)
        self.capture_thread.daemon = True
        self.capture_thread.start()
        self.logger.info(f"Capture démarrée sur interface {self.interface}")
    
    def _capture_loop(self):
        """Boucle principale de capture"""
        try:
            sniff(
                iface=self.interface,
                filter=self.filter_str,
                prn=self.packet_handler,
                stop_filter=lambda x: not self.is_capturing
            )
        except Exception as e:
            self.logger.error(f"Erreur lors de la capture: {e}")
    
    def stop_capture(self):
        """Arrête la capture réseau"""
        self.is_capturing = False
        if self.capture_thread:
            self.capture_thread.join(timeout=5)
        self.logger.info("Capture arrêtée")
    
    def get_packets(self, max_packets=None):
        """Récupère les paquets de la queue"""
        packets = []
        count = 0
        
        while not self.packet_queue.empty():
            if max_packets and count >= max_packets:
                break
            try:
                packet = self.packet_queue.get_nowait()
                packets.append(packet)
                count += 1
            except queue.Empty:
                break
        
        return packets

# Exemple d'utilisation avec simulation pour les tests
class SimulatedCapture:
    """Capture simulée pour tests et développement"""
    def __init__(self):
        self.packet_queue = queue.Queue()
        self.is_simulating = False
        
    def generate_simulated_traffic(self):
        """Génère du trafic réseau simulé"""
        import random
        
        normal_patterns = [
            {'src_ip': '192.168.1.10', 'dst_ip': '8.8.8.8', 'dst_port': 53, 'protocol_name': 'UDP'},
            {'src_ip': '192.168.1.15', 'dst_ip': '172.217.16.46', 'dst_port': 443, 'protocol_name': 'TCP'},
            {'src_ip': '192.168.1.20', 'dst_ip': '151.101.65.140', 'dst_port': 80, 'protocol_name': 'TCP'},
        ]
        
        anomaly_patterns = [
            {'src_ip': '10.0.0.5', 'dst_ip': '192.168.1.10', 'dst_port': 22, 'protocol_name': 'TCP'},  # SSH brute force
            {'src_ip': '172.16.0.1', 'dst_ip': '192.168.1.0', 'dst_port': 445, 'protocol_name': 'TCP'},  # SMB scan
            {'src_ip': '203.0.113.1', 'dst_ip': '192.168.1.5', 'dst_port': 3389, 'protocol_name': 'TCP'},  # RDP
        ]
        
        while self.is_simulating:
            # 90% trafic normal, 10% anomalies
            if random.random() < 0.9:
                pattern = random.choice(normal_patterns)
            else:
                pattern = random.choice(anomaly_patterns)
            
            packet_info = {
                'timestamp': datetime.now(),
                'src_ip': pattern['src_ip'],
                'dst_ip': pattern['dst_ip'],
                'src_port': random.randint(1024, 65535),
                'dst_port': pattern['dst_port'],
                'protocol_name': pattern['protocol_name'],
                'packet_size': random.randint(64, 1500),
                'ttl': random.randint(64, 255),
                'flags': random.randint(0, 31)
            }
            
            try:
                self.packet_queue.put(packet_info, block=False)
            except queue.Full:
                pass
            
            time.sleep(random.uniform(0.01, 0.1))  # Délai variable
    
    def start_capture(self):
        """Démarre la simulation"""
        self.is_simulating = True
        self.sim_thread = threading.Thread(target=self.generate_simulated_traffic)
        self.sim_thread.daemon = True
        self.sim_thread.start()
    
    def stop_capture(self):
        """Arrête la simulation"""
        self.is_simulating = False
    
    def get_packets(self, max_packets=None):
        """Récupère les paquets simulés"""
        packets = []
        count = 0
        
        while not self.packet_queue.empty():
            if max_packets and count >= max_packets:
                break
            try:
                packet = self.packet_queue.get_nowait()
                packets.append(packet)
                count += 1
            except queue.Empty:
                break
        
        return packets

